import os
import time
import struct
import numpy as np
import cv2
import imageio
import scipy
import matplotlib.pyplot

#https://www.scopus.com/record/display.uri?eid=2-s2.0-70449470310&origin=resultslist&sort=plf-f&src=s&sid=db4296379cd4a73544e78d5087326eb2&sot=b&sdt=b&s=TITLE-ABS-KEY%28True+random+number+generators+on+PC%29&sl=45&sessionSearchId=db4296379cd4a73544e78d5087326eb2


def von_neumann_whitener(bits):
    """
    Apply the Von Neumann whitening algorithm to an array of bits generated by an 8-bit TRNG.
    """
    whitened_bits = []
    i = 0
    while i < len(bits) - 1:
        if bits[i] != bits[i+1]:
            whitened_bits.append(bits[i])
        i += 2
    return np.array(whitened_bits)

def wideo(wideo_samples = 50000000):
    capture = cv2.VideoCapture(0)

    red_values = []
    green_values = []
    blue_values = []
        
    while True:
        ret, frame = capture.read()
        cv2.imshow('Video', frame)
        #print(frame)
        
        
        red_channel = frame[:,:,0]
        green_channel = frame[:,:,1]
        blue_channel = frame[:,:,2]

        numbervalues45_55=False
        for row in range(frame.shape[0]):
            for col in range(frame.shape[1]):
                if(green_channel[row, col] != 0 and green_channel[row, col] != 255):
                    if(numbervalues45_55 and ((green_channel[row, col] >10 and green_channel[row, col]<50) or (green_channel[row, col] >160 and green_channel[row, col]<210))):
                        green_values.append(green_channel[row, col])
                        numbervalues45_55=False
                    elif not numbervalues45_55 and ((green_channel[row, col] >10 and green_channel[row, col]<50 or (green_channel[row, col] >160 and green_channel[row, col]<210))):
                        numbervalues45_55=True
                    else:
                        green_values.append(green_channel[row, col])
                


        #for row in range(frame.shape[0]):
            #for col in range(frame.shape[1]):
                #if(red_channel[row, col] != 0 and red_channel[row, col] != 255):
                #    red_values.append(red_channel[row, col])
                #if(green_channel[row, col] != 0 and green_channel[row, col] != 255):
                #   green_values.append(green_channel[row, col])
                #if(blue_channel[row, col] != 0 and blue_channel[row, col] != 255):
                #    blue_values.append(blue_channel[row, col])
                
            





        
        
        if (cv2.waitKey(1) == ord('q') or len(green_values) >= wideo_samples) :
            break
        

    capture.release()
    cv2.destroyAllWindows()
    #print (len(green_values))
    #hist = matplotlib.pyplot.hist(green_values,density=True,bins=256, range=[0, 255])
    #matplotlib.pyplot.show()
    #print(scipy.stats.entropy(hist[0],base = 2))
    #x = open("D:/Studia/SEM6/TRNG/wyniki_wideo.txt","w")
    #for i in green_values:
    #    x.write(str(i))
    return green_values
wideo()