import matplotlib.pyplot
import scipy

def von_neumann_whitener(bits):
    """
    Apply the Von Neumann whitening algorithm to an array of bits generated by an 8-bit TRNG.
    """
    i = 0
    whitened_bits = ""
    while i < len(bits) - 1:
        if bits[i] != bits[i+1]:
            whitened_bits += (bits[i])
        i += 2
    return whitened_bits


with open("D:/Studia/SEM6/TRNG/wyniki_ładne.txt", "r") as f:
    data = f.read().strip()  # odczytaj dane i usuń ewentualne białe znaki na końcu

binary_string = data.replace(",", "").replace("[", "").replace("]", "")  # usuń niepotrzebne znaki z ciągu binarnego


whitened_bits = (von_neumann_whitener(binary_string))
uint_values = []



# podziel ciąg binarny na 8-bitowe części i zamień je na wartości uint
for i in range(0, len(whitened_bits), 8):
    uint_value = int(whitened_bits[i:i+8], 2)
    if(uint_value > 0 and uint_value < 255):
        uint_values.append(uint_value)

print(len(uint_values))
hist = matplotlib.pyplot.hist(uint_values,density=True,bins=256, range=[0, 255])
matplotlib.pyplot.show()
print(scipy.stats.entropy(hist[0],base = 2))
f.close()
f= open("D:/Studia/SEM6/TRNG/wyniki_final.txt","w")
for i in uint_values:
    f.write(str(i))
f.close
