import TRNG_dzwiek
#TRNG_dzwiek.path.append('D:/Studia/SEM6/TRNG')
import TRNG_wideo
#TRNG_wideo.path.append('D:/Studia/SEM6/TRNG')
import interfejs
import scipy
import matplotlib
import numpy as np
import tkinter as tk


def von_neumann_whitener(bits):
    """
    Apply the Von Neumann whitening algorithm to an array of bits generated by an 8-bit TRNG.
    """
    whitened_bits = []
    i = 0
    while i < len(bits) - 1:
        if bits[i] != bits[i+1]:
            whitened_bits.append(bits[i])
        i += 2
    return whitened_bits

class Application(tk.Frame):
    def __init__(self, master=None):
            super().__init__(master)
            self.master = master
            self.pack()
            self.create_widgets()


wideo_samples = 5000000
audio_samples = 5000000

wideo_list = TRNG_wideo.wideo(wideo_samples)



result = []
wideo_bits = []
for i in wideo_list:
    result.append(format(i, '#010b')[2:])
#print("audio red")
wideo_bits = von_neumann_whitener(result)

audio_list = TRNG_dzwiek.audio(audio_samples)




audio_bits = []
result_audio = []
for i in audio_list:
    result_audio.append(format(i, '#010b')[2:])
audio_bits = von_neumann_whitener(result_audio)

whole_list = wideo_bits


root = tk.Tk()
app = interfejs.Application(wideo_bits,audio_bits,min(len(audio_bits),len(wideo_bits)),master = root)
app.mainloop()
whole_list = app.union_list
# for i in range(min(len(wideo_bits),len(audio_bits))):
#    whole_list.append(wideo_bits[i])
#    whole_list.append(audio_bits[i])










#print(len(whole_list))
#hist = matplotlib.pyplot.hist(whole_list,density=True,bins=256, range=[0, 255])
#matplotlib.pyplot.show()
#print(scipy.stats.entropy(hist[0],base = 2))

f = open("D:/Studia/SEM6/TRNG/wyniki.txt","w")
for i in whole_list:
    f.write(i)
f.close